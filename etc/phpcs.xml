<ruleset name="starbug-project-coding-standard">
    <description>Starbug Project Coding Standard</description>
    <arg name="tab-width" value="2"/>

    <!-- USE PSR2 as a baseline -->
    <rule ref="PSR2">
      <!-- this would disallow any one line conditions -->
      <!-- this exclusion is likely to be removed -->
      <exclude name="Generic.ControlStructures.InlineControlStructure"/>
      <!-- Don't enforce line length -->
      <exclude name="Generic.Files.LineLength"/>
      <!-- this would require that a class opening brace is on a new line -->
      <exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine"/>
      <!-- this would require that a methods opening brace is on a new line -->
      <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
    </rule>

    <rule ref="PSR2.Methods.FunctionCallSignature">
      <properties>
        <property name="indent" value="2"/>
      </properties>
      <!-- this would disallow content after the opening parenthesis -->
      <!-- example of this: in migrations to separate table from columns -->
      <exclude name="PSR2.Methods.FunctionCallSignature.ContentAfterOpenBracket"/>
    </rule>

    <rule ref="PSR2.ControlStructures.SwitchDeclaration">
      <properties>
        <property name="indent" value="2"/>
      </properties>
    </rule>

    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
      <properties>
        <property name="indent" value="2"/>
      </properties>
    </rule>

    <!-- PSR2 DEVIATIONS (2 space tab width, and opening braces) -->
    <!-- This enforces opening brace on same line -->
    <rule ref="Generic.Classes.OpeningBraceSameLine"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
    <!-- 2 space tab width -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
      <properties>
        <property name="indent" value="2"/>
      </properties>
    </rule>

    <!-- Additions -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- Commenting -->
    <rule ref="Generic.Commenting"/>
    <!--<rule ref="Squiz.Commenting.BlockComment"/>-->
    <!--<rule ref="Squiz.Commenting.ClassComment"/>-->
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <!--
    <rule ref="Squiz.Commenting.FunctionComment">
      <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
      <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
    </rule>
    -->
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
    <rule ref="Squiz.Commenting.InlineComment">
      <exclude name="Squiz.Commenting.InlineComment.NotCapital"/>
      <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
      <exclude name="Squiz.Commenting.InlineComment.SpacingAfter"/>
    </rule>

</ruleset>
