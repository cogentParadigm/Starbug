pipeline {
  agent {
    node {
      label ""
      customWorkspace "${env.JOB_NAME}/${params.branch}"
    }
  }

  parameters {
    string(name: "branch", defaultValue: "master")
    string(name: "host", defaultValue: "local.com")
    string(name: "project", defaultValue: "starbug")
  }

  environment {
    JOB_ID = "${params.project}_${params.branch.replaceAll(/[-\.]/, '_').toLowerCase()}"
    DOMAIN = "${params.project}-${params.branch.replaceAll(/[.]/, '-').toLowerCase()}.${params.host}"
    UID = sh(script: "id -u ${env.USER}", returnStdout: true).trim()
    GID = sh(script: "id -g ${env.USER}", returnStdout: true).trim()
    PHP_UID = "${env.UID}"
    PHP_GID = "${env.GID}"
    PHP_USER = "${env.USER}"
    PHP_GROUP = sh(script: "id -gn ${env.USER}", returnStdout: true).trim()
    DB_NAME = "${params.project}"
    DB_PREFIX = "sb_"
  }

  stages {

    stage("Start services") {
      steps {
        sh """
          sed -i'' -e \"s/sb.local.com/${env.DOMAIN}/\" app/etc/docker/nginx/proxy.conf
          sed -i'' -e \"s/sb.local.com/${env.DOMAIN}/\" docker-compose.yml
          sed -i'' -e \"s/COMPOSE_PROJECT_NAME=.*/COMPOSE_PROJECT_NAME=${env.JOB_ID}/\" .env
          sed -i'' -e \"s/docker-compose.chrome.yml/docker-compose.chrome-headless.yml/\" .env
          docker-compose down --volumes
          docker-compose up -d
          sleep 0.3
          docker-compose exec -T mariadb mysql -e \"DROP DATABASE IF EXISTS ${env.DB_NAME}; CREATE DATABASE IF NOT EXISTS ${env.DB_NAME}\"
          docker-compose exec -T mariadb mysql -e \"DROP DATABASE IF EXISTS ${env.DB_NAME}_test; CREATE DATABASE IF NOT EXISTS ${env.DB_NAME}_test\"
        """
      }
    }

    stage("Install application") {
      steps {
        sh "docker-compose exec -u ${env.UID}: -T php composer install"

        // Setup/migrate database
        sh """
          docker-compose exec -u ${env.UID}: -T php php sb setup --host=http://${env.DOMAIN} --dbuser=root --dbname=${env.DB_NAME} --dbprefix=${env.DB_PREFIX}
          docker-compose exec -u ${env.UID}: -T php composer dump-autoload
        """

        // Migrate test database
        sh """
          docker-compose exec -u ${env.UID}: -T php php sb migrate -t
          docker-compose exec -u ${env.UID}: -T php composer dump-autoload
        """

        // Update settings
        sh """
          docker-compose exec -u ${env.UID}: -T php php sb store settings id:4 value:no-reply@${env.DOMAIN}
          docker-compose exec -u ${env.UID}: -T php php sb store settings id:5 value:mailcatcher
          docker-compose exec -u ${env.UID}: -T php php sb store settings id:6 value:1025
        """

        // Configure behat
        sh """
          sed -i'' -e 's/localhost:1080/mailcatcher:1080/' behat.yml
          sed -i'' -e \"s/sb.local.com/${env.DOMAIN}/\" behat.yml
        """
      }
    }

    stage("Run tests") {
      steps {
        sh "mkdir -p build/logs"
        sh "docker-compose exec -u ${env.UID}: -T php vendor/bin/phpcs --extensions=php --standard=vendor/starbug/standard/phpcs.xml --ignore=views,templates,layouts --report=checkstyle --report-file=build/logs/checkstyle.xml core app modules || true"
        sh "docker-compose exec -u ${env.UID}: -T php vendor/bin/phploc --log-csv build/logs/phploc.csv --count-tests app core modules"
        sh "docker-compose exec -u ${env.UID}: -T php vendor/bin/phpmd . xml vendor/starbug/standard/phpmd.xml --reportfile build/logs/phpmd.xml --exclude libraries,var,node_modules,vendor || true"
        sh "docker-compose exec -u ${env.UID}: -T php vendor/bin/phpcpd --log-pmd build/logs/pmd-cpd.xml app core modules || true"
        sh "docker-compose exec -u ${env.UID}: -T php vendor/bin/phpunit -c etc/phpunit.xml || true"
        sh "docker-compose exec -u ${env.UID}: -T php vendor/bin/behat --format=junit --out=build/logs/behat --format=pretty --out=std || true"
      }

      post {
        always {
          sh "sed -i'' -e 's/\\/var\\/www\\/html\\///' build/logs/*.*"
          sh "yq -i 'del(.testsuites.testsuite[].testcase[].+@status)' build/logs/behat/default.xml"
          sh "yq -i 'del(.testsuites.testsuite[].testcase[].+@file)' build/logs/behat/default.xml"
          xunit testTimeMargin: '3000', thresholdMode: 1,
            thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],
            tools: [ PHPUnit(pattern: 'build/logs/phpunit.xml'), JUnit(pattern: 'build/logs/behat/*.xml') ]
          recordIssues enabledForFailure: true,
            aggregatingResults: true,
            tools: [
              checkStyle(pattern: "build/logs/checkstyle.xml"),
              pmdParser(pattern: "build/logs/phpmd.xml"),
              cpd(pattern: "build/logs/pmd-cpd.xml")
            ],
            qualityGates: [
              [threshold: 1, type: 'TOTAL_ERROR']
            ]
          step([
            $class: "CloverPublisher",
            cloverReportDir: "build/logs",
            cloverReportFileName: "clover.xml"
          ])
          cobertura coberturaReportFile: "cobertura-coverage.xml", enableNewApi: true, failNoReports: false
          plot csvFileName: "phloc-plot.csv",
            csvSeries: [[
              file: "build/logs/phploc.csv",
              inclusionFlag: "OFF"
            ]],
            group: "PHPLOC",
            title: "Project Size",
            style: "line",
            keepRecords: true,
            numBuilds: "100",
            yaxis: ""
        }
      }
    }

  }

  post {
    always {
      sh "docker-compose stop || true"
    }
  }
}
