pipeline {
  agent {
    node {
      label ""
      customWorkspace "workspace/${env.JOB_NAME}/${params.branch}"
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: "50", artifactNumToKeepStr: "5"))
  }

  parameters {
    string(name: "branch", defaultValue: "master")
    string(name: "host", defaultValue: "local.com")
    string(name: "project", defaultValue: "sb")
  }

  environment {
    JOB_ID = "${params.project}-${params.branch.replaceAll(/[\.]/, '-').toLowerCase()}"
    DOMAIN = "${env.JOB_ID}.${params.host}"
    DB_NAME = "db"
    DB_PREFIX = "sb_"
  }

  stages {

    stage("Start services") {
      steps {
        sh """
          ddev config --project-name=${env.JOB_ID} --project-tld=${params.host}
          ddev delete
          ddev start
          ddev mysql -uroot -proot -e \"CREATE DATABASE IF NOT EXISTS ${env.DB_NAME}\"
          ddev mysql -uroot -proot -e \"CREATE DATABASE IF NOT EXISTS ${env.DB_NAME}_test\"
        """
      }
    }

    stage("Install application") {
      steps {
        sh "ddev composer install"

        // Setup/migrate database
        sh """
          ddev sb setup --host=https://${env.DOMAIN}
          ddev composer dump-autoload
        """

        // Migrate test database
        sh """
          ddev sb migrate -t
        """

        // Update settings
        sh """
          ddev sb store settings id:4 value:no-reply@${env.DOMAIN}
        """

        // Configure behat
        sh """
          sed -i'' -e \"s/sb.local.com/${env.DOMAIN}/\" behat.yml
        """
      }
    }

    stage("Run tests") {
      steps {
        sh "mkdir -p build/logs"
        sh "ddev exec vendor/bin/phpcs --extensions=php --standard=vendor/starbug/standard/phpcs.xml --ignore=views,templates,layouts --report=checkstyle --report-file=build/logs/checkstyle.xml core app modules || true"
        sh "ddev exec vendor/bin/phploc --log-csv build/logs/phploc.csv --count-tests app core modules"
        sh "ddev exec vendor/bin/phpmd . xml vendor/starbug/standard/phpmd.xml --reportfile build/logs/phpmd.xml --exclude libraries,var,node_modules,vendor || true"
        sh "ddev exec vendor/bin/phpcpd --log-pmd build/logs/pmd-cpd.xml app core modules || true"
        sh "ddev exec vendor/bin/phpunit -c etc/phpunit.xml || true"
        sh "ddev exec vendor/bin/behat --format=junit --out=build/logs/behat --format=pretty --out=std || true"
      }

      post {
        always {
          sh "sed -i'' -e 's/\\/var\\/www\\/html\\///' build/logs/*.*"
          sh "yq -i 'del(.. | select(has(\"+@status\")).+@status)' build/logs/behat/default.xml"
          sh "yq -i 'del(.. | select(has(\"+@file\")).+@file)' build/logs/behat/default.xml"
          xunit testTimeMargin: '3000', thresholdMode: 1,
            thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],
            tools: [ PHPUnit(pattern: 'build/logs/phpunit.xml'), JUnit(pattern: 'build/logs/behat/*.xml') ]
          recordIssues enabledForFailure: true,
            aggregatingResults: true,
            tools: [
              checkStyle(pattern: "build/logs/checkstyle.xml"),
              pmdParser(pattern: "build/logs/phpmd.xml"),
              cpd(pattern: "build/logs/pmd-cpd.xml")
            ],
            qualityGates: [
              [threshold: 1, type: 'TOTAL_ERROR']
            ]
          step([
            $class: "CloverPublisher",
            cloverReportDir: "build/logs",
            cloverReportFileName: "clover.xml"
          ])
          cobertura coberturaReportFile: "cobertura-coverage.xml", enableNewApi: true, failNoReports: false
          plot csvFileName: "phloc-plot.csv",
            csvSeries: [[
              file: "build/logs/phploc.csv",
              inclusionFlag: "OFF"
            ]],
            group: "PHPLOC",
            title: "Project Size",
            style: "line",
            keepRecords: true,
            numBuilds: "100",
            yaxis: ""
        }
      }
    }

  }

  post {
    always {
      sh "ddev stop || true"
    }
  }
}
